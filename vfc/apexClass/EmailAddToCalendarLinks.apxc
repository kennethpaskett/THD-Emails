public with sharing class EmailAddToCalendarLinks {
    @AuraEnabled
    public String evtTitle { get; set; }
    @AuraEnabled
    public Date evtDate { get; set; }
    @AuraEnabled
    public Time evtStartTime { get; set; }
    @AuraEnabled
    public Time evtEndTime { get; set; }
    @AuraEnabled
    public String evtTimeZone { get; set; }
    @AuraEnabled
    public String evtLocation { get; set; }
    @AuraEnabled
    public String evtDescription { get; set; }
    @AuraEnabled
    public DateTime evtStartDateTime { get; set; }
    @AuraEnabled
    public DateTime evtEndDateTime { get; set; }
    @AuraEnabled
    public Integer evtDuration { get; set; }

    public String googleCalendarLink;
    public String outlookComCalendarLink;
    public String office365CalendarLink;
    public String yahooCalendarLink;

    public String ICSFileContent;
    public String ICSFileName;

    // Constructor to set default values
    public void EmailAddToCalendarLinks() {
        evtTitle = evtTitle != null ? evtTitle : 'The Home Depot';
        evtDescription = evtDescription != null ? evtDescription : 'Your meeting time with The Home Depot.';
        evtDate = evtDate != null ? evtDate : Date.today();
        evtDuration = evtDuration != null ? evtDuration : 60;
        evtStartTime = evtStartTime != null ? evtStartTime : Time.newInstance(12, 0, 0, 0);
        evtEndTime = evtEndTime != null ? evtEndTime : evtStartTime.addMinutes(evtDuration);
        evtStartDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        evtEndDateTime = evtEndDateTime != null ? evtEndDateTime : evtStartDateTime.addMinutes(evtDuration);
        evtLocation = evtLocation != null ? evtLocation : '';
    }

    public String getTimeZone(String evtTimeZone) {
        String evtTimeZoneText;
        
        if(evtTimeZone != ''){
            if (evtTimeZone == 'EST'){
                evtTimeZoneText = 'America/New_York';
            }
            else if(evtTimeZone == 'CST'){
                evtTimeZoneText = 'America/Chicago';
            }
            else if(evtTimeZone == 'MST'){
                evtTimeZoneText = 'America/Denver';
            }
            else if(evtTimeZone == 'MDT'){
                evtTimeZoneText = 'America/Phoenix';
            }
            else if(evtTimeZone == 'PST'){
                evtTimeZoneText = 'America/Los_Angeles';
            }
            else if(evtTimeZone == 'Pacific/Honolulu'){
                evtTimeZoneText = 'Pacific/Honolulu';
            }
            else if(evtTimeZone == 'AKST'){
                evtTimeZoneText = 'America/Anchorage';
            }
            else if(evtTimeZone == 'AST'){
                evtTimeZoneText = 'America/Puerto_Rico';
            }
        }
        return evtTimeZoneText;
    }
    
    public String getGoogleCalendarLink() {
        EmailAddToCalendarLinks(); // Populate null dates to prevent errors
        String base = 'https://www.google.com/calendar/render?action=TEMPLATE';
        String title = '&text=' + EncodingUtil.urlEncode(evtTitle, 'UTF-8');
        
        // Use evtStartDateTime and evtEndDateTime if provided, else fall back to DateTime created from evtDate and evtStartTime
        DateTime startDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        DateTime endDateTime = evtEndDateTime != null ? evtEndDateTime : DateTime.newInstance(evtDate, evtEndTime);
        
        String formattedStartDateTime = startDateTime.format('yyyyMMdd\'T\'HHmmss');
        String formattedEndDateTime = endDateTime.format('yyyyMMdd\'T\'HHmmss');
        
        String evtDateTime = '&dates=' + formattedStartDateTime + '/' + formattedEndDateTime;
        
        String timeZone = evtTimeZone != null ? '&ctz=' + getTimeZone(evtTimeZone) : '';
        
        String loc = evtLocation != null ? '&location=' + EncodingUtil.urlEncode(evtLocation, 'UTF-8') : '';
        String apptDesc = evtDescription != null ? '&details=' + EncodingUtil.urlEncode(evtDescription, 'UTF-8') : '';
        
        googleCalendarLink = base + title + evtDateTime + timeZone + loc + apptDesc;
        return googleCalendarLink;
    }

    public String getOutlookComCalendarLink() {
        EmailAddToCalendarLinks(); // Populate null dates to prevent errors
        String base = 'https://outlook.live.com/calendar/0/deeplink/compose?path=/calendar/action/compose&rru=addevent&allday=false';
        String title = '&subject=' + EncodingUtil.urlEncode(evtTitle, 'UTF-8');
        
        DateTime startDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        DateTime endDateTime = evtEndDateTime != null ? evtEndDateTime : DateTime.newInstance(evtDate, evtEndTime);
        
        String formattedStartDateTime = startDateTime.format('yyyy-MM-dd\'T\'HH:mm:ss');
        String formattedEndDateTime = endDateTime.format('yyyy-MM-dd\'T\'HH:mm:ss');

        String evtDateTime = '&startdt=' + formattedStartDateTime + '&enddt=' + formattedEndDateTime;
        String loc = evtLocation != null ? '&location=' + EncodingUtil.urlEncode(evtLocation, 'UTF-8') : '';
        String apptDesc = evtDescription != null ? '&body=' + EncodingUtil.urlEncode(evtDescription, 'UTF-8') : '';

        outlookComCalendarLink = base + title + evtDateTime + loc + apptDesc;
        return outlookComCalendarLink;
    }

    public String getOffice365CalendarLink() {
        EmailAddToCalendarLinks(); // Populate null dates to prevent errors
        String base = 'https://outlook.office.com/calendar/0/deeplink/compose?path=/calendar/action/compose&rru=addevent&allday=false';
        String title = '&subject=' + EncodingUtil.urlEncode(evtTitle, 'UTF-8');
        
        DateTime startDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        DateTime endDateTime = evtEndDateTime != null ? evtEndDateTime : DateTime.newInstance(evtDate, evtEndTime);
        
        String formattedStartDateTime = startDateTime.format('yyyy-MM-dd\'T\'HH:mm:ss');
        String formattedEndDateTime = endDateTime.format('yyyy-MM-dd\'T\'HH:mm:ss');

        String evtDateTime = '&startdt=' + formattedStartDateTime + '&enddt=' + formattedEndDateTime;
        String loc = evtLocation != null ? '&location=' + EncodingUtil.urlEncode(evtLocation, 'UTF-8') : '';
        String apptDesc = evtDescription != null ? '&body=' + EncodingUtil.urlEncode(evtDescription, 'UTF-8') : '';

        office365CalendarLink = base + title + evtDateTime + loc + apptDesc;
        return office365CalendarLink;
    }

    public String getYahooCalendarLink() {
        EmailAddToCalendarLinks(); // Populate null dates to prevent errors
        String base = 'https://calendar.yahoo.com/?v=60&view=d&type=20';
        String title = '&title=' + EncodingUtil.urlEncode(evtTitle, 'UTF-8');
        
        DateTime startDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        DateTime endDateTime = evtEndDateTime != null ? evtEndDateTime : DateTime.newInstance(evtDate, evtEndTime);
        
        String formattedStartDateTime = startDateTime.format('yyyyMMdd\'T\'HHmmss');
        String formattedEndDateTime = endDateTime.format('yyyyMMdd\'T\'HHmmss');

        String evtDateTime = '&st=' + formattedStartDateTime + '&et=' + formattedEndDateTime;
        String loc = evtLocation != null ? '&in_loc=' + EncodingUtil.urlEncode(evtLocation, 'UTF-8') : '';
        String apptDesc = evtDescription != null ? '&desc=' + EncodingUtil.urlEncode(evtDescription, 'UTF-8') : '';

        yahooCalendarLink = base + title + evtDateTime + loc + apptDesc;
        return yahooCalendarLink;
    }

    // Method to generate ICS content
    public String getICSFileContent() {
        EmailAddToCalendarLinks(); // Populate null dates to prevent errors
        DateTime startDateTime = evtStartDateTime != null ? evtStartDateTime : DateTime.newInstance(evtDate, evtStartTime);
        DateTime endDateTime = evtEndDateTime != null ? evtEndDateTime : DateTime.newInstance(evtDate, evtEndTime);
        String icsContent = 'BEGIN:VCALENDAR\n' +
                            'VERSION:2.0\n' +
                            'PRODID:-//The Home Depot//Home Services//EN\n' +
                            'BEGIN:VEVENT\n' +
                            'UID:' + generateUID() + '\n' +
                            'DTSTAMP:' + DateTime.now().format('yyyyMMdd\'T\'HHmmss') + '\n' +
                            'DTSTART:' + startDateTime.format('yyyyMMdd\'T\'HHmmss') + '\n' +
                            'DTEND:' + endDateTime.format('yyyyMMdd\'T\'HHmmss') + '\n' +
                            'SUMMARY:' + evtTitle + '\n' +
                            'DESCRIPTION:' + evtDescription + '\n' +
                            'LOCATION:' + evtLocation + '\n' +
                            'END:VEVENT\n' +
                            'END:VCALENDAR';

        return icsContent;
    }

    // Method to generate a unique ID for the event
    public String generateUID() {
        return EncodingUtil.urlEncode(String.valueOf(DateTime.now().getTime()) + '@homedepot.com', 'UTF-8');
    }

    public String getICSFileName() {
        return EncodingUtil.urlEncode(evtTitle, 'UTF-8');
    }

}
